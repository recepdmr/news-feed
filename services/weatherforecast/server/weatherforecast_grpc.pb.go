// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: weatherforecast.proto

package server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherForecastClient is the client API for WeatherForecast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherForecastClient interface {
	GetWeatherForecastByCityName(ctx context.Context, in *GetWeatherForecastByCityNameRequest, opts ...grpc.CallOption) (*GetWeatherForecastByCityNameResponse, error)
	FillWeatherForecast(ctx context.Context, in *FillWeatherForecastRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type weatherForecastClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherForecastClient(cc grpc.ClientConnInterface) WeatherForecastClient {
	return &weatherForecastClient{cc}
}

func (c *weatherForecastClient) GetWeatherForecastByCityName(ctx context.Context, in *GetWeatherForecastByCityNameRequest, opts ...grpc.CallOption) (*GetWeatherForecastByCityNameResponse, error) {
	out := new(GetWeatherForecastByCityNameResponse)
	err := c.cc.Invoke(ctx, "/WeatherForecast/GetWeatherForecastByCityName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherForecastClient) FillWeatherForecast(ctx context.Context, in *FillWeatherForecastRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/WeatherForecast/FillWeatherForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherForecastServer is the server API for WeatherForecast service.
// All implementations must embed UnimplementedWeatherForecastServer
// for forward compatibility
type WeatherForecastServer interface {
	GetWeatherForecastByCityName(context.Context, *GetWeatherForecastByCityNameRequest) (*GetWeatherForecastByCityNameResponse, error)
	FillWeatherForecast(context.Context, *FillWeatherForecastRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWeatherForecastServer()
}

// UnimplementedWeatherForecastServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherForecastServer struct {
}

func (UnimplementedWeatherForecastServer) GetWeatherForecastByCityName(context.Context, *GetWeatherForecastByCityNameRequest) (*GetWeatherForecastByCityNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherForecastByCityName not implemented")
}
func (UnimplementedWeatherForecastServer) FillWeatherForecast(context.Context, *FillWeatherForecastRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillWeatherForecast not implemented")
}
func (UnimplementedWeatherForecastServer) mustEmbedUnimplementedWeatherForecastServer() {}

// UnsafeWeatherForecastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherForecastServer will
// result in compilation errors.
type UnsafeWeatherForecastServer interface {
	mustEmbedUnimplementedWeatherForecastServer()
}

func RegisterWeatherForecastServer(s grpc.ServiceRegistrar, srv WeatherForecastServer) {
	s.RegisterService(&WeatherForecast_ServiceDesc, srv)
}

func _WeatherForecast_GetWeatherForecastByCityName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherForecastByCityNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherForecastServer).GetWeatherForecastByCityName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeatherForecast/GetWeatherForecastByCityName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherForecastServer).GetWeatherForecastByCityName(ctx, req.(*GetWeatherForecastByCityNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherForecast_FillWeatherForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillWeatherForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherForecastServer).FillWeatherForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeatherForecast/FillWeatherForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherForecastServer).FillWeatherForecast(ctx, req.(*FillWeatherForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherForecast_ServiceDesc is the grpc.ServiceDesc for WeatherForecast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherForecast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherForecast",
	HandlerType: (*WeatherForecastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeatherForecastByCityName",
			Handler:    _WeatherForecast_GetWeatherForecastByCityName_Handler,
		},
		{
			MethodName: "FillWeatherForecast",
			Handler:    _WeatherForecast_FillWeatherForecast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weatherforecast.proto",
}
